//
//  BeerDetailFeature.swift
//  Beers
//
//  Created Christian Elies on 24.04.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

struct BeerDetailFeature: ReducerProtocol {
    struct State: Equatable {
        var beer: Beer
    }

    enum Action: Hashable {
        case onAppear
        case fetchBeerResponse(Result<Beer, BeerError>)
    }

    @Dependency(\.mainQueue) var mainQueue
    var fetchBeer: (_ id: Int) -> Effect<Beer, BeerError>

    func reduce(into state: inout State, action: Action) -> EffectTask<Action> {
        switch action {
        case .onAppear:
            return fetchBeer(state.id)
                .receive(on: mainQueue)
                .catchToEffect(BeerDetailFeature.Action.fetchBeerResponse)

        case let .fetchBeerResponse(.success(beer)):
            state.beer = beer

        default: ()
        }

        return .none
    }
}

extension BeerDetailFeature.State: Identifiable {
    var id: Int { beer.id }
}

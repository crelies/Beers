//
//  BeerDetailFeature.swift
//  Beers
//
//  Created Christian Elies on 24.04.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

struct BeerDetailFeature: ReducerProtocol {
    struct State: Equatable {
        var beer: Beer
    }

    enum Action: Hashable {
        case onAppear
        case fetchBeerResponse(TaskResult<Beer>)
    }

    @Dependency(\.mainQueue) var mainQueue
    @Dependency(\.beerClient.fetchBeer) var fetchBeer

    func reduce(into state: inout State, action: Action) -> EffectTask<Action> {
        switch action {
        case .onAppear:
            return .task(operation: { [id = state.id] in
                await .fetchBeerResponse(TaskResult {
                    try await fetchBeer(id)
                })
            }, catch: { error in
                .fetchBeerResponse(.failure(error))
            })
            // TODO: is this required anymore?
            .receive(on: mainQueue)
            .eraseToEffect()

        case let .fetchBeerResponse(.success(beer)):
            state.beer = beer

        default: ()
        }

        return .none
    }
}

extension BeerDetailFeature.State: Identifiable {
    var id: Int { beer.id }
}

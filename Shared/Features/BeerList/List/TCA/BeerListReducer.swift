//
//  BeerListReducer.swift
//  Beers
//
//  Created Christian Elies on 23.04.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture

enum BeerListModule {}

extension BeerListModule {
    static var reducer: Reducer<BeerListState, BeerListAction, BeerListEnvironment> {
        Reducer.combine(
            BeerListRowModule.reducer
                .forEach(
                    state: \.rowStates,
                    action: /BeerListAction.row(index:action:),
                    environment: { listEnvironment in
                        BeerListRowEnvironment(fetchBeer: listEnvironment.fetchBeer)
                    }
                )
            ,
            Reducer<BeerListState, BeerListAction, BeerListEnvironment> { state, action, environment in
                switch action {
                case .onAppear:
                    guard state.rowStates.isEmpty else {
                        return .none
                    }
                    return environment.fetchBeers()
                        .catchToEffect()
                        .map(BeerListAction.fetchBeersResponse)
                case let .fetchBeersResponse(.success(beers)):
                    state.rowStates = beers.map { beer in
                        BeerListRowState(beer: beer)
                    }
                    return .none
                case .fetchBeersResponse(.failure):
                    state.rowStates = []
                    return .none
                case let .row(index, rowAction):
                    switch rowAction {
                    case .onAppear:
                        guard index == state.rowStates.endIndex - 1 else {
                            return .none
                        }
                        return environment.nextBeers()
                            .catchToEffect()
                            .map(BeerListAction.fetchBeersResponse)
                    case let .didTapRow(id: .some(id)):
                        state.selection = state.rowStates.first(where: { $0.id == id})?.beer
                        return .none
                    default:
                        return .none
                    }
                case let .selectBeer(beer):
                    state.selection = beer
                    return .none
                }
            }
        )
    }
}

//
//  BeerListView.swift
//  Beers
//
//  Created Christian Elies on 23.04.21.
//  Copyright Â© 2021 Christian Elies. All rights reserved.
//
//  Template generated by Christian Elies @crelies
//  https://www.christianelies.de
//

import ComposableArchitecture
import SwiftUI

struct BeerListView: View {
    private var listStyle: some ListStyle {
        #if os(macOS)
        return SidebarListStyle()
        #else
        return InsetGroupedListStyle()
        #endif
    }

    private var refreshToolbarItemPlacement: ToolbarItemPlacement {
        #if os(macOS)
        return .automatic
        #else
        return .navigationBarLeading
        #endif
    }

    let store: Store<BeerListState, BeerListAction>

    var body: some View {
        WithViewStore(
            store.scope(
                state: \.view,
                action: { (viewAction: BeerListView.Action) in
                    viewAction.feature
                }
            ),
            content: content
        )
    }
}

private extension BeerListView {
    @ViewBuilder func content(viewStore: ViewStore<BeerListView.State, BeerListView.Action>) -> some View {
        switch viewStore.viewState {
        case .loading:
            ProgressView()
                .onAppear {
                    viewStore.send(.onAppear)
                }
        case .loaded(let rowStates):
            listView(viewStore: viewStore, rowStates: rowStates)
            .navigationTitle(Text("Beers"))
            .if {
                #if os(macOS)
                $0.onDeleteCommand {
                    onDeleteCommand(viewStore: viewStore)
                }
                #else
                $0
                #endif
            }
            .toolbar {
                #if os(iOS)
                ToolbarItem {
                    if !viewStore.isLoading {
                        EditButton()
                    }
                }
                #endif

                ToolbarItem(placement: refreshToolbarItemPlacement) {
                    Button(action: {
                        viewStore.send(.refresh)
                    }) {
                        Image(systemName: "arrow.clockwise")
                    }
                }
            }
        case let .failed(error):
            Text(error.localizedDescription)
        }
    }

    func listView(viewStore: ViewStore<BeerListView.State, BeerListView.Action>, rowStates: [BeerListRowState]) -> some View {
        List(
            selection: viewStore.binding(
                get: { _ in viewStore.selection },
                send: BeerListView.Action.selectBeer
            )
        ) {
            if rowStates.isEmpty {
                Text("No beers").font(.headline)
            } else {
                Section(header: headerView(page: viewStore.page), footer: footerView(count: rowStates.count, isLoading: viewStore.isLoading)) {
                    ForEachStore(
                        store.scope(
                            state: \.rowStates,
                            action: BeerListAction.row
                        )) { rowViewStore in
                        BeerListRowView(store: rowViewStore)
                    }
                    .onMove { indexSet, offset in
                        viewStore.send(.move(indexSet: indexSet, toOffset: offset))
                    }
                    .onDelete { indexSet in
                        viewStore.send(.delete(indexSet: indexSet))
                    }
                }
            }
        }
        .listStyle(listStyle)
    }

    func headerView(page: Int) -> some View {
        HStack {
            Spacer()

            Text("\(page) page(s) loaded")
            .foregroundColor(.secondary)
            .font(.caption)

            Spacer()
        }
    }

    func footerView(count: Int, isLoading: Bool) -> some View {
        VStack {
            HStack {
                Spacer()

                Text("\(count) beers")
                .foregroundColor(.secondary)
                .font(.footnote)

                Spacer()
            }

            if isLoading {
                ProgressView()
            }
        }
        .padding()
    }

    func onDeleteCommand(viewStore: ViewStore<BeerListView.State, BeerListView.Action>) {
        guard case ViewState.loaded = viewStore.viewState else {
            return
        }

        guard let selection = viewStore.selection else {
            return
        }

        guard let index = viewStore.rowStates.firstIndex(where: { $0.beer == selection }) else {
            return
        }

        viewStore.send(.delete(indexSet: .init(integer: index)))
    }
}
